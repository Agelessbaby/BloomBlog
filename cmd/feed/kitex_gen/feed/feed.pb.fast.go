// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package feed

import (
	fmt "fmt"
	user "github.com/Agelessbaby/BloomBlog/cmd/feed/kitex_gen/user"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *BloomblogFeedRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BloomblogFeedRequest[number], err)
}

func (x *BloomblogFeedRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.LatestTime = &tmp
	return offset, err
}

func (x *BloomblogFeedRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.Token = &tmp
	return offset, err
}

func (x *BloomblogFeedResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_BloomblogFeedResponse[number], err)
}

func (x *BloomblogFeedResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.StatusCode, offset, err = fastpb.ReadInt32(buf, _type)
	return offset, err
}

func (x *BloomblogFeedResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadString(buf, _type)
	x.StatusMsg = &tmp
	return offset, err
}

func (x *BloomblogFeedResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Post
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.PostList = append(x.PostList, &v)
	return offset, nil
}

func (x *BloomblogFeedResponse) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	tmp, offset, err := fastpb.ReadInt64(buf, _type)
	x.NextTime = &tmp
	return offset, err
}

func (x *PostIdRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PostIdRequest[number], err)
}

func (x *PostIdRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PostId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *PostIdRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SearchId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Post) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 9:
		offset, err = x.fastReadField9(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Post[number], err)
}

func (x *Post) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Post) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v user.User
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Author = &v
	return offset, nil
}

func (x *Post) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.TextContent, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v string
	v, offset, err = fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	x.ImageUrls = append(x.ImageUrls, v)
	return offset, err
}

func (x *Post) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.LikeCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Post) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CommentCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Post) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.IsLiked, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Post) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Post) fastReadField9(buf []byte, _type int8) (offset int, err error) {
	x.CreatedAt, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *BloomblogFeedRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *BloomblogFeedRequest) fastWriteField1(buf []byte) (offset int) {
	if x.LatestTime == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetLatestTime())
	return offset
}

func (x *BloomblogFeedRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Token == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetToken())
	return offset
}

func (x *BloomblogFeedResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *BloomblogFeedResponse) fastWriteField1(buf []byte) (offset int) {
	if x.StatusCode == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 1, x.GetStatusCode())
	return offset
}

func (x *BloomblogFeedResponse) fastWriteField2(buf []byte) (offset int) {
	if x.StatusMsg == nil {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetStatusMsg())
	return offset
}

func (x *BloomblogFeedResponse) fastWriteField3(buf []byte) (offset int) {
	if x.PostList == nil {
		return offset
	}
	for i := range x.GetPostList() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetPostList()[i])
	}
	return offset
}

func (x *BloomblogFeedResponse) fastWriteField4(buf []byte) (offset int) {
	if x.NextTime == nil {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetNextTime())
	return offset
}

func (x *PostIdRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *PostIdRequest) fastWriteField1(buf []byte) (offset int) {
	if x.PostId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetPostId())
	return offset
}

func (x *PostIdRequest) fastWriteField2(buf []byte) (offset int) {
	if x.SearchId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetSearchId())
	return offset
}

func (x *Post) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	offset += x.fastWriteField9(buf[offset:])
	return offset
}

func (x *Post) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Post) fastWriteField2(buf []byte) (offset int) {
	if x.Author == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetAuthor())
	return offset
}

func (x *Post) fastWriteField3(buf []byte) (offset int) {
	if x.TextContent == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetTextContent())
	return offset
}

func (x *Post) fastWriteField4(buf []byte) (offset int) {
	if len(x.ImageUrls) == 0 {
		return offset
	}
	for i := range x.GetImageUrls() {
		offset += fastpb.WriteString(buf[offset:], 4, x.GetImageUrls()[i])
	}
	return offset
}

func (x *Post) fastWriteField5(buf []byte) (offset int) {
	if x.LikeCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.GetLikeCount())
	return offset
}

func (x *Post) fastWriteField6(buf []byte) (offset int) {
	if x.CommentCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.GetCommentCount())
	return offset
}

func (x *Post) fastWriteField7(buf []byte) (offset int) {
	if !x.IsLiked {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 7, x.GetIsLiked())
	return offset
}

func (x *Post) fastWriteField8(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.GetTitle())
	return offset
}

func (x *Post) fastWriteField9(buf []byte) (offset int) {
	if x.CreatedAt == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 9, x.GetCreatedAt())
	return offset
}

func (x *BloomblogFeedRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *BloomblogFeedRequest) sizeField1() (n int) {
	if x.LatestTime == nil {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetLatestTime())
	return n
}

func (x *BloomblogFeedRequest) sizeField2() (n int) {
	if x.Token == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetToken())
	return n
}

func (x *BloomblogFeedResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *BloomblogFeedResponse) sizeField1() (n int) {
	if x.StatusCode == 0 {
		return n
	}
	n += fastpb.SizeInt32(1, x.GetStatusCode())
	return n
}

func (x *BloomblogFeedResponse) sizeField2() (n int) {
	if x.StatusMsg == nil {
		return n
	}
	n += fastpb.SizeString(2, x.GetStatusMsg())
	return n
}

func (x *BloomblogFeedResponse) sizeField3() (n int) {
	if x.PostList == nil {
		return n
	}
	for i := range x.GetPostList() {
		n += fastpb.SizeMessage(3, x.GetPostList()[i])
	}
	return n
}

func (x *BloomblogFeedResponse) sizeField4() (n int) {
	if x.NextTime == nil {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetNextTime())
	return n
}

func (x *PostIdRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *PostIdRequest) sizeField1() (n int) {
	if x.PostId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetPostId())
	return n
}

func (x *PostIdRequest) sizeField2() (n int) {
	if x.SearchId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetSearchId())
	return n
}

func (x *Post) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	n += x.sizeField9()
	return n
}

func (x *Post) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *Post) sizeField2() (n int) {
	if x.Author == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetAuthor())
	return n
}

func (x *Post) sizeField3() (n int) {
	if x.TextContent == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetTextContent())
	return n
}

func (x *Post) sizeField4() (n int) {
	if len(x.ImageUrls) == 0 {
		return n
	}
	for i := range x.GetImageUrls() {
		n += fastpb.SizeString(4, x.GetImageUrls()[i])
	}
	return n
}

func (x *Post) sizeField5() (n int) {
	if x.LikeCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.GetLikeCount())
	return n
}

func (x *Post) sizeField6() (n int) {
	if x.CommentCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.GetCommentCount())
	return n
}

func (x *Post) sizeField7() (n int) {
	if !x.IsLiked {
		return n
	}
	n += fastpb.SizeBool(7, x.GetIsLiked())
	return n
}

func (x *Post) sizeField8() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(8, x.GetTitle())
	return n
}

func (x *Post) sizeField9() (n int) {
	if x.CreatedAt == 0 {
		return n
	}
	n += fastpb.SizeInt64(9, x.GetCreatedAt())
	return n
}

var fieldIDToName_BloomblogFeedRequest = map[int32]string{
	1: "LatestTime",
	2: "Token",
}

var fieldIDToName_BloomblogFeedResponse = map[int32]string{
	1: "StatusCode",
	2: "StatusMsg",
	3: "PostList",
	4: "NextTime",
}

var fieldIDToName_PostIdRequest = map[int32]string{
	1: "PostId",
	2: "SearchId",
}

var fieldIDToName_Post = map[int32]string{
	1: "Id",
	2: "Author",
	3: "TextContent",
	4: "ImageUrls",
	5: "LikeCount",
	6: "CommentCount",
	7: "IsLiked",
	8: "Title",
	9: "CreatedAt",
}

var _ = user.File_user_proto
