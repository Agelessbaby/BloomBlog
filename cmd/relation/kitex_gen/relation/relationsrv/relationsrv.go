// Code generated by Kitex v0.11.3. DO NOT EDIT.

package relationsrv

import (
	"context"
	"errors"
	relation "github.com/Agelessbaby/BloomBlog/cmd/relation/kitex_gen/relation"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"RelationAction": kitex.NewMethodInfo(
		relationActionHandler,
		newRelationActionArgs,
		newRelationActionResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RelationFollowList": kitex.NewMethodInfo(
		relationFollowListHandler,
		newRelationFollowListArgs,
		newRelationFollowListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"RelationFollowerList": kitex.NewMethodInfo(
		relationFollowerListHandler,
		newRelationFollowerListArgs,
		newRelationFollowerListResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	relationSrvServiceInfo                = NewServiceInfo()
	relationSrvServiceInfoForClient       = NewServiceInfoForClient()
	relationSrvServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return relationSrvServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return relationSrvServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return relationSrvServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "RelationSrv"
	handlerType := (*relation.RelationSrv)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "relation",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func relationActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.BloomblogRelationActionRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationSrv).RelationAction(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RelationActionArgs:
		success, err := handler.(relation.RelationSrv).RelationAction(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RelationActionResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRelationActionArgs() interface{} {
	return &RelationActionArgs{}
}

func newRelationActionResult() interface{} {
	return &RelationActionResult{}
}

type RelationActionArgs struct {
	Req *relation.BloomblogRelationActionRequest
}

func (p *RelationActionArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.BloomblogRelationActionRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RelationActionArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RelationActionArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RelationActionArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RelationActionArgs) Unmarshal(in []byte) error {
	msg := new(relation.BloomblogRelationActionRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RelationActionArgs_Req_DEFAULT *relation.BloomblogRelationActionRequest

func (p *RelationActionArgs) GetReq() *relation.BloomblogRelationActionRequest {
	if !p.IsSetReq() {
		return RelationActionArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RelationActionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RelationActionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RelationActionResult struct {
	Success *relation.BloomblogRelationActionResponse
}

var RelationActionResult_Success_DEFAULT *relation.BloomblogRelationActionResponse

func (p *RelationActionResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.BloomblogRelationActionResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RelationActionResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RelationActionResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RelationActionResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RelationActionResult) Unmarshal(in []byte) error {
	msg := new(relation.BloomblogRelationActionResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RelationActionResult) GetSuccess() *relation.BloomblogRelationActionResponse {
	if !p.IsSetSuccess() {
		return RelationActionResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RelationActionResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.BloomblogRelationActionResponse)
}

func (p *RelationActionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelationActionResult) GetResult() interface{} {
	return p.Success
}

func relationFollowListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.BloomblogRelationFollowListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationSrv).RelationFollowList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RelationFollowListArgs:
		success, err := handler.(relation.RelationSrv).RelationFollowList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RelationFollowListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRelationFollowListArgs() interface{} {
	return &RelationFollowListArgs{}
}

func newRelationFollowListResult() interface{} {
	return &RelationFollowListResult{}
}

type RelationFollowListArgs struct {
	Req *relation.BloomblogRelationFollowListRequest
}

func (p *RelationFollowListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.BloomblogRelationFollowListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RelationFollowListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RelationFollowListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RelationFollowListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RelationFollowListArgs) Unmarshal(in []byte) error {
	msg := new(relation.BloomblogRelationFollowListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RelationFollowListArgs_Req_DEFAULT *relation.BloomblogRelationFollowListRequest

func (p *RelationFollowListArgs) GetReq() *relation.BloomblogRelationFollowListRequest {
	if !p.IsSetReq() {
		return RelationFollowListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RelationFollowListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RelationFollowListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RelationFollowListResult struct {
	Success *relation.BloomblogRelationFollowListResponse
}

var RelationFollowListResult_Success_DEFAULT *relation.BloomblogRelationFollowListResponse

func (p *RelationFollowListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.BloomblogRelationFollowListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RelationFollowListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RelationFollowListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RelationFollowListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RelationFollowListResult) Unmarshal(in []byte) error {
	msg := new(relation.BloomblogRelationFollowListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RelationFollowListResult) GetSuccess() *relation.BloomblogRelationFollowListResponse {
	if !p.IsSetSuccess() {
		return RelationFollowListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RelationFollowListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.BloomblogRelationFollowListResponse)
}

func (p *RelationFollowListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelationFollowListResult) GetResult() interface{} {
	return p.Success
}

func relationFollowerListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(relation.BloomblogRelationFollowerListRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(relation.RelationSrv).RelationFollowerList(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *RelationFollowerListArgs:
		success, err := handler.(relation.RelationSrv).RelationFollowerList(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*RelationFollowerListResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newRelationFollowerListArgs() interface{} {
	return &RelationFollowerListArgs{}
}

func newRelationFollowerListResult() interface{} {
	return &RelationFollowerListResult{}
}

type RelationFollowerListArgs struct {
	Req *relation.BloomblogRelationFollowerListRequest
}

func (p *RelationFollowerListArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(relation.BloomblogRelationFollowerListRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RelationFollowerListArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RelationFollowerListArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RelationFollowerListArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *RelationFollowerListArgs) Unmarshal(in []byte) error {
	msg := new(relation.BloomblogRelationFollowerListRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var RelationFollowerListArgs_Req_DEFAULT *relation.BloomblogRelationFollowerListRequest

func (p *RelationFollowerListArgs) GetReq() *relation.BloomblogRelationFollowerListRequest {
	if !p.IsSetReq() {
		return RelationFollowerListArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RelationFollowerListArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RelationFollowerListArgs) GetFirstArgument() interface{} {
	return p.Req
}

type RelationFollowerListResult struct {
	Success *relation.BloomblogRelationFollowerListResponse
}

var RelationFollowerListResult_Success_DEFAULT *relation.BloomblogRelationFollowerListResponse

func (p *RelationFollowerListResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(relation.BloomblogRelationFollowerListResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RelationFollowerListResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RelationFollowerListResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RelationFollowerListResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *RelationFollowerListResult) Unmarshal(in []byte) error {
	msg := new(relation.BloomblogRelationFollowerListResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RelationFollowerListResult) GetSuccess() *relation.BloomblogRelationFollowerListResponse {
	if !p.IsSetSuccess() {
		return RelationFollowerListResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RelationFollowerListResult) SetSuccess(x interface{}) {
	p.Success = x.(*relation.BloomblogRelationFollowerListResponse)
}

func (p *RelationFollowerListResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RelationFollowerListResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) RelationAction(ctx context.Context, Req *relation.BloomblogRelationActionRequest) (r *relation.BloomblogRelationActionResponse, err error) {
	var _args RelationActionArgs
	_args.Req = Req
	var _result RelationActionResult
	if err = p.c.Call(ctx, "RelationAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowList(ctx context.Context, Req *relation.BloomblogRelationFollowListRequest) (r *relation.BloomblogRelationFollowListResponse, err error) {
	var _args RelationFollowListArgs
	_args.Req = Req
	var _result RelationFollowListResult
	if err = p.c.Call(ctx, "RelationFollowList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RelationFollowerList(ctx context.Context, Req *relation.BloomblogRelationFollowerListRequest) (r *relation.BloomblogRelationFollowerListResponse, err error) {
	var _args RelationFollowerListArgs
	_args.Req = Req
	var _result RelationFollowerListResult
	if err = p.c.Call(ctx, "RelationFollowerList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
