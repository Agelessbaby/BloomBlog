input {
  beats {
    port => 5044
  }
}

filter {
  # Capture user, optional host and optional ip fields
  # sample log file lines:
  # User@Host: logstash[logstash] @ localhost [127.0.0.1]
  # User@Host: logstash[logstash] @  [127.0.0.1]
  grok {
    match => [ "message", "^# User@Host: %{USER:user}(?:[[^]]+])?s+@s+%{HOST:host}?s+[%{IP:ip}?]" ]
  }
  # Capture query time, lock time, rows returned and rows examined
  # sample log file lines:
  # Query_time: 102.413328  Lock_time: 0.000167 Rows_sent: 0  Rows_examined: 1970
  # Query_time: 1.113464  Lock_time: 0.000128 Rows_sent: 1  Rows_examined: 0
  grok {
    match => [ "message", "^# Query_time: %{NUMBER:duration:float}s+Lock_time: %{NUMBER:lock_wait:float} Rows_sent: %{NUMBER:results:int} s*Rows_examined: %{NUMBER:scanned:int}"]
  }
  # Capture the time the query happened
  grok {
    match => [ "message", "^SET timestamp=%{NUMBER:timestamp};" ]
  }
  # Extract the time based on the time of the query and
  # not the time the item got logged
  date {
    match => [ "timestamp", "UNIX" ]
  }
  # Drop the captured timestamp field since it has been moved to the
  # time of the event
  mutate {
    remove_field => "timestamp"
  }
}

output {
  stdout {
    codec => rubydebug
  }
}
